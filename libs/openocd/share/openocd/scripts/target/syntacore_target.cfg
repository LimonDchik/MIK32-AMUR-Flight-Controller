# OpenOCD Target Configuration for SCR Processors
#
# Copyright (c) 2022-2023, Syntacore LLC
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.

# This configuration file offers several customization options to support a
# wide range of devices and usage scenarios. It can be used when each TAP in
# the system has only one DM/RISCV hart connected to it. If your system is more
# complex, you'll need your own target configuration file. Please consult the
# OpenOCD User Guide for information about writing such files.
#
# **Example 1:**
# Defines four OpenOCD targets to interact with 4-hart system
# ```
# > openocd \
#     -f $OPENOCD_ROOT/share/openocd/scripts/interface/$DEBUG_ADAPTER_CONFIG \
#     -f $OPENOCD_ROOT/share/openocd/scripts/target/syntacore_target.cfg \
#     -c "sc_target_config harts_num 4" \
#     -c init
# ```
#
# **Example 2:**
# Defines four OpenOCD targets and combines them into an SMP group
# ```
# > openocd \
#     -f $OPENOCD_ROOT/share/openocd/scripts/interface/$DEBUG_ADAPTER_CONFIG \
#     -f $OPENOCD_ROOT/share/openocd/scripts/target/syntacore_target.cfg \
#     -c "sc_target_config harts_num 4" \
#     -c "sc_target_config smp_configuration 1" \
#     -c init
# ```
#
# **Example 3:**
# Defines one OpenOCD target and sets adapter speed to 1 MHz
# ```
# > openocd
#     -f $OPENOCD_ROOT/share/openocd/scripts/interface/$DEBUG_ADAPTER_CONFIG \
#     -f $OPENOCD_ROOT/share/openocd/scripts/target/syntacore_target.cfg \
#     -c "sc_target_config adapter_speed 1000" \
#     -c init
# ```

set __sc_target_defaults(adapter_speed) 500

# adapter srst pulse_width
set __sc_target_defaults(adapter_srst_pulse_width) ""
# NOTE: this is former adapter_nsrst_delay
set __sc_target_defaults(adapter_srst_delay) ""

# WARNING: setting this option is not legal for non-ftdi drivers
set __sc_target_defaults(ftdi_tdo_sample_edge) ""

set __sc_target_defaults(chipname) riscv
set __sc_target_defaults(irlen) 5
set __sc_target_defaults(reset_config) none
set __sc_target_defaults(harts_num) 1
set __sc_target_defaults(expose_csrs) ""

set __sc_target_defaults(smp_configuration) 0
set __sc_target_defaults(gdb_report_data_abort) 1
set __sc_target_defaults(gdb_report_register_access_error) 1

set __sc_target_defaults(work-area-enable) 1
set __sc_target_defaults(work-area-phys)   0x3ff0000
set __sc_target_defaults(work-area-size)   0x10000
set __sc_target_defaults(work-area-backup) 1

# we expect this to be 1 for all syntacore CPU.
# this should be set to 0 for spike
set __sc_target_defaults(new_tap_for_each_target) 1

proc proc_exists p {
	return [expr {[llength [info procs $p]] > 0}]
	# TODO: figure out if we need uplevel
	# return uplevel 1 [expr {[llength [info procs $p]] > 0}]
}

proc sc_pre_tap_hook {} {
}

proc sc_target_configuration_hook {tgt} {
}

proc sc_targets_ready_hook {tgts} {
}

proc sc_target_config {param value} {
	global __sc_target_defaults
	if {![info exists __sc_target_defaults($param)]} {
		error "unsupported configuration property $param"
	}
	global __sc_target_user
	set __sc_target_user($param) $value
	return ""
}

proc sc_target_config_log {msg} {
	echo "Syntacore Config: $msg"
}

proc sc_target_config_get {param {param_type ""}} {
	global __sc_target_user
	global __sc_target_defaults

	if {[info exists __sc_target_user($param)]} {
		set result $__sc_target_user($param)
		sc_target_config_log "getting $param for __sc_target... got $result (from user parameters)"
		return $result
	}
	if {[info exists __sc_target_defaults($param)]} {
		set result $__sc_target_defaults($param)
		if {$param_type eq "critical" } {
			sc_target_config_log "getting $param for __sc_target... got $result (from defaults)"
		}
		return $result
	}
	error "unsupported configuration property $param"
}

proc init_targets {} {

	proc sc_target_cpu_suffix {index} {
		return "cpu${index}"
	}

	proc sc_tap_cpu_suffix {index} {
		if {[sc_target_config_get new_tap_for_each_target] == 0} {
			return "tap"
		}
		return [sc_target_cpu_suffix $index]
	}

	proc sc_target_get_cpu_working_area {cpu_index} {
		set work_area_base [sc_target_config_get work-area-phys critical]
		set work_area_size [sc_target_config_get work-area-size]
		return [format 0x%x [expr {$work_area_base - ($work_area_size * $cpu_index)}]]
	}

	adapter speed [sc_target_config_get adapter_speed]

	set ADAPTER_SRST_PULSE_WIDTH [sc_target_config_get adapter_srst_pulse_width]
	if { $ADAPTER_SRST_PULSE_WIDTH ne "" } {
		adapter srst pulse_width $ADAPTER_SRST_PULSE_WIDTH
	}

	set ADAPTER_SRST_DELAY [sc_target_config_get adapter_srst_delay]
	if { $ADAPTER_SRST_DELAY ne "" } {
		adapter srst delay $ADAPTER_SRST_DELAY
	}

	set FTDI_TDO_SAMPLE_EDGE [sc_target_config_get ftdi_tdo_sample_edge]
	if { $FTDI_TDO_SAMPLE_EDGE ne "" } {
		ftdi tdo_sample_edge $FTDI_TDO_SAMPLE_EDGE
	}

	set RESET_CONFIG [sc_target_config_get reset_config]
	set RESET_CONFIG [regexp -all -inline {\S+} $RESET_CONFIG]
	reset_config {*}$RESET_CONFIG

	sc_pre_tap_hook

	set _CHIPNAME [sc_target_config_get chipname]
	set _NUM_CORES [sc_target_config_get harts_num critical]

	set _CREATE_NEW_TAP_FOR_EACH_TARGET 0
	if {[sc_target_config_get new_tap_for_each_target] == 1} {
		set _CREATE_NEW_TAP_FOR_EACH_TARGET 1
	}
	if {$_CREATE_NEW_TAP_FOR_EACH_TARGET == 0} {
		jtag newtap $_CHIPNAME [sc_tap_cpu_suffix 0] -irlen [sc_target_config_get irlen]
	}
	for {set i 0} {$i < $_NUM_CORES} {incr i} {
		set _TAPNAME $_CHIPNAME.[sc_tap_cpu_suffix $i]
		if {$_CREATE_NEW_TAP_FOR_EACH_TARGET == 1} {
			jtag newtap $_CHIPNAME [sc_tap_cpu_suffix $i] -irlen [sc_target_config_get irlen]
		}

		set _TARGETNAME $_CHIPNAME.[sc_target_cpu_suffix $i]
		target create $_TARGETNAME riscv -endian little -chain-position $_TAPNAME -coreid $i

		# Currently, there are issues with some fpga stands without this option
		$_TARGETNAME configure -rtos hwthread

		if {[sc_target_config_get work-area-enable critical]} {
			$_TARGETNAME configure \
				-work-area-phys [sc_target_get_cpu_working_area $i] \
				-work-area-size [sc_target_config_get work-area-size] \
				-work-area-backup [sc_target_config_get work-area-backup]
		}

		if {[proc_exists sc_target_ide_csr_cloak] == 1} {
			set HIDE_CSRS [sc_target_ide_csr_cloak]
			sc_target_config_log "sc_target_ide_csr_cloak detected, hide_csrs configured with $HIDE_CSRS"
			$_TARGETNAME riscv hide_csrs $HIDE_CSRS
		}

		if {[sc_target_config_get expose_csrs] != ""} {
			$_TARGETNAME riscv expose_csrs [sc_target_config_get expose_csrs]
		}

		sc_target_configuration_hook $_TARGETNAME
	}

	if {[sc_target_config_get gdb_report_register_access_error]} {
		gdb_report_register_access_error enable
	} else {
		gdb_report_register_access_error disable
	}

	if {[sc_target_config_get gdb_report_data_abort]} {
		gdb_report_data_abort enable
	} else {
		gdb_report_data_abort disable
	}

	if {[sc_target_config_get smp_configuration critial]} {
		if {[llength [target names]] > 1} {
			target smp {*}[target names]
		} else {
			sc_target_config_log "Warning: smp configuration was requested, but only 1 target defined"
		}
	}

	sc_targets_ready_hook [target names]
}

